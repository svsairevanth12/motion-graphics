# CodeRabbit Configuration for AI-Powered Motion Graphics Generator
# Optimized for performance, type safety, and code quality

# Global settings
language: en-US
early_access: false
tone_instructions: |
  Be concise and actionable in feedback. Focus on performance implications for animation rendering. Prioritize type safety and memory management. Suggest specific improvements with code examples. Flag potential security vulnerabilities immediately.

# Review settings
reviews:
  profile: chill
  request_changes_workflow: false
  high_level_summary: true
  poem: false
  review_status: true
  auto_review:
    enabled: true
    drafts: false

# Path-based instructions for different parts of the codebase
path_instructions:
  - path: "lib/motion-engine/**"
    instructions: |
      Focus on animation performance and memory management. Ensure type safety for complex motion graphics properties. Check for proper cleanup of animation resources. Optimize frame rate for smooth rendering. Use immutable state patterns for timeline data.

  - path: "components/editor/**"
    instructions: |
      Focus on React performance optimization including memoization and callbacks. Ensure real-time update efficiency. Check proper event handling for canvas interactions. Verify accessibility for editor controls. Implement error boundaries.

  - path: "hooks/**"
    instructions: |
      Focus on proper dependency arrays in useEffect. Prevent memory leaks in custom hooks. Ensure consistent error handling patterns. Optimize performance for frequent updates. Implement proper cleanup in useEffect returns.

  - path: "lib/ai/**"
    instructions: |
      Focus on API key security and environment variable usage. Implement proper error handling for AI service failures. Add rate limiting and retry logic. Validate and sanitize inputs. Ensure response parsing and type safety.

  - path: "app/api/**"
    instructions: |
      Focus on input validation and sanitization. Ensure proper error responses with status codes. Implement authentication and authorization. Add rate limiting. Optimize database queries.

# Additional instructions for motion graphics specific patterns
chat_instructions: |
  When reviewing this motion graphics codebase, pay special attention to:

  Animation Performance:
  - Flag heavy computations in render methods
  - Detect missing React.memo for expensive components
  - Identify inefficient frame calculations
  - Check for proper cleanup of animation intervals/timeouts

  Memory Management:
  - Detect potential memory leaks in animation loops
  - Flag missing cleanup in useEffect
  - Identify large object creation in render
  - Check for proper disposal of video/canvas resources

  Type Safety:
  - Flag usage of 'any' type
  - Detect missing type definitions for props
  - Identify unsafe type assertions
  - Check for proper generic constraints

  Security:
  - Flag hardcoded API keys or secrets
  - Detect missing input validation
  - Check for proper environment variable usage
  - Identify potential XSS vulnerabilities

  React Performance:
  - Detect inline object/function creation in JSX
  - Flag missing dependency arrays in useEffect
  - Identify unnecessary re-renders
  - Check for proper key props in lists



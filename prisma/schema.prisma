// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  templates     Template[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId  String?
  template    Template? @relation(fields: [templateId], references: [id])
  config      Json     // Motion graphics configuration
  status      ProjectStatus @default(DRAFT)
  videoUrl    String?  // Generated video URL
  thumbnailUrl String? // Thumbnail URL
  duration    Int?     // Duration in seconds
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  renders     Render[]
}

model Template {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  config      Json     // Template configuration
  thumbnailUrl String?
  isPublic    Boolean  @default(false)
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projects    Project[]
}

model Render {
  id        String      @id @default(cuid())
  projectId String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  status    RenderStatus @default(PENDING)
  progress  Int         @default(0)
  videoUrl  String?
  errorMessage String?
  startedAt DateTime?
  completedAt DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum ProjectStatus {
  DRAFT
  RENDERING
  COMPLETED
  FAILED
}

enum RenderStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
